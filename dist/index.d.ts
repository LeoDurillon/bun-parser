// Generated by dts-bundle-generator v9.5.1

export type BaseSchema = Record<string, {
	type: "string" | "number" | "boolean";
	short?: string;
	description?: string;
	required?: boolean;
}>;
export type ParsedValue<T extends BaseSchema> = {
	[P in keyof T]: T[P] extends {
		required: true;
	} ? SchemaType[T[P]["type"]] : SchemaType[T[P]["type"]] | undefined;
};
export interface ParserConstructor<T extends BaseSchema> {
	name?: string;
	description?: string;
	schema: T;
	path?: boolean;
	help?: {
		name: string;
		short: string;
	};
	separator?: string;
}
/**
 * A class to parse command-line arguments based on a defined schema.
 * @template T - The schema type extending BaseSchema.
 */
declare class Parser<T extends BaseSchema> {
	private name?;
	private description?;
	private args;
	place: string;
	private separator;
	private schema;
	private help?;
	private path;
	value: string | {
		path: string;
		values: ParsedValue<T>;
	};
	/**
	 * Creates an instance of Parser.
	 * @param props - The properties for initializing the parser.
	 * @param props.name - The name of the program.
	 * @param props.description - The description of the program.
	 * @param props.schema - The schema defining the expected arguments.
	 * @param props.path - Indicates if the path should be included in the arguments.
	 * @param props.help - The help options for the program.
	 * @param props.separator - The separator for argument values.
	 */
	constructor({ name, description, help, path, separator, schema, }: ParserConstructor<T>);
	/**
	 * Parses the command-line arguments based on the schema.
	 * @returns A string with help information or An object containing the parsed path and values.
	 * @throws {ParserError} If an argument is not found in the schema.
	 * @private
	 */
	private parse;
	/**
	 * Displays help information and exits the process if the help argument is found.
	 * @private
	 */
	private helper;
	/**
	 * Formats a message for a given parser element.
	 * @param e - The parser element to format.
	 * @returns A formatted string with the element's details.
	 * @private
	 */
	private message;
	/**
	 * Return the value of the command-line arguments based on the schema.
	 * Write in stdout the help information if the help flag was triggered
	 * @returns A string with help information or An object containing the parsed path and values.
	 */
	getValue(): string | {
		path: string;
		values: ParsedValue<T>;
	};
	/**
	 * Shorthand function to creates an instance of Parser and return the value.
	 * @param props - The properties for initializing the parser.
	 * @returns A string with help information or An object containing the parsed path and values.
	 */
	static generate<T extends BaseSchema>(props: ParserConstructor<T>): string | {
		path: string;
		values: ParsedValue<T>;
	};
}

export {
	Parser as default,
};

export {};
